diff --git a/litecpu/litecpu.vhd b/litecpu/litecpu.vhd
index 060e188..afab7be 100644
--- a/litecpu/litecpu.vhd
+++ b/litecpu/litecpu.vhd
@@ -32,6 +32,10 @@ architecture behave of litecpu is
 	signal MEMRData: dword;
 	signal MEMWData: dword;
 	
+	signal int_mode: rammode_t;
+	signal int_addr: mem_addr_t;
+	signal int_wdata: dword;
+	
 	signal rom_addr: mem_addr_t;
 	signal rom_rdata: dword;
 	signal rom_wdata: dword;
@@ -55,6 +59,7 @@ architecture behave of litecpu is
 	signal UART1_IN_ready: std_logic;
 	signal UART1_OUT_ready: std_logic;
 	
+	signal irq: dword;
 	
 	-- Don't know why but component must be used here
 	component async_transmitter generic(
@@ -97,6 +102,10 @@ architecture behave of litecpu is
 			MEMRData_o: out dword;
 			MEMWData_i: in dword;
 			
+			int_mode_i: in rammode_t;
+			int_addr_i: in mem_addr_t;
+			int_wdata_i: in dword;
+			
 			-- to ROM
 			rom_mode_o: out rammode_t;
 			rom_addr_o: out mem_addr_t;
@@ -120,7 +129,10 @@ architecture behave of litecpu is
 			COMTEST: out std_logic;
 			
 			UART1_IN_ready_o: out std_logic;
-			UART1_OUT_ready_o: out std_logic
+			UART1_OUT_ready_o: out std_logic;
+			
+			-- IRQ
+			irq_o: out dword
 		);
 	end component;
 
@@ -161,11 +173,17 @@ architecture behave of litecpu is
 			MEMRData_i: in dword;
 			MEMWData_o: out dword;
 			
+			int_mode_o: out rammode_t;
+			int_addr_o: out mem_addr_t;
+			int_wdata_o: out dword;
+			
 			display_reg_o: out dword;
 			display_inst_o: out dword;
 			
 			UART1_IN_ready_i: in std_logic;
-			UART1_OUT_ready_i: in std_logic
+			UART1_OUT_ready_i: in std_logic;
+			
+			irq_i: in dword
 		);
 	end component;
 
@@ -215,6 +233,10 @@ begin
 		MEMRData_o => MEMRData,
 		MEMWData_i => MEMWData,
 		
+		int_mode_i => int_mode,
+		int_addr_i => int_addr,
+		int_wdata_i => int_wdata,
+		
 		rom_addr_o=> rom_addr,
 		rom_rdata_i=> rom_rdata,
 		rom_wdata_o=> rom_wdata,
@@ -235,7 +257,9 @@ begin
 		COMTEST => COMTEST,
 		
 		UART1_IN_ready_o => UART1_IN_ready,
-		UART1_OUT_ready_o => UART1_OUT_ready		
+		UART1_OUT_ready_o => UART1_OUT_ready,
+	
+		irq_o => irq
 	);
 
 	ucpu_core:
@@ -254,11 +278,17 @@ begin
 		MEMRData_i => MEMRData,
 		MEMWData_o => MEMWData,
 		
+		int_mode_o => int_mode,
+		int_addr_o => int_addr,
+		int_wdata_o => int_wdata,
+		
 		display_reg_o => watch_reg,
 		display_inst_o => watch_inst,
 		
 		UART1_IN_ready_i => UART1_IN_ready,
-		UART1_OUT_ready_i => UART1_OUT_ready	
+		UART1_OUT_ready_i => UART1_OUT_ready,
+		
+		irq_i => irq
 	);
 
 	uAsyncTransmitter: component async_transmitter generic map(
diff --git a/litecpu/peripheral/mmu.vhd b/litecpu/peripheral/mmu.vhd
index 7588b8c..fba9e84 100644
--- a/litecpu/peripheral/mmu.vhd
+++ b/litecpu/peripheral/mmu.vhd
@@ -20,6 +20,10 @@ entity MMU is
 		MEMRData_o: out dword;
 		MEMWData_i: in dword;
 		
+		int_mode_i: in rammode_t;
+		int_addr_i: in mem_addr_t;
+		int_wdata_i: in dword;
+		
 		-- to RAM
 		ram_we_o: out std_logic;
 		ram_addr_o: out ram_addr_t;
@@ -44,17 +48,21 @@ entity MMU is
 		COMTEST: out std_logic;
 		
 		UART1_IN_ready_o: out std_logic;
-		UART1_OUT_ready_o: out std_logic
+		UART1_OUT_ready_o: out std_logic;
+		
+		--IRQ_HANDLER
+		irq_o: out dword
 	);
 end MMU;
 
 architecture bhv of MMU is
    signal comRdata, comWdata: std_logic_vector(7 downto 0);
-   signal comReadyRead, comLastRead: std_logic;
-   signal comReadySend, comLastSend: std_logic;
+   signal comReadyRead, comLastRead: std_logic:= '0';
+   signal comReadySend, comLastSend: std_logic:= '0';
    signal COMdata: std_logic_vector(31 downto 0);
 	signal COMTransmitStart1: std_logic;
 	signal COMTEST1: std_logic := '0';
+	signal irq: dword := x"00000000";
 begin
 
 	-- write (happens on clk_i rising edges) (*** not a practical assump. ***)
@@ -66,12 +74,17 @@ begin
 	COMTransmitStartTEST <= COMTransmitStart1;
 	UART1_IN_ready_o <= to_std_logic(comReadyRead/=comLastRead);
 	UART1_OUT_ready_o <= (not COMTransmitBusy) and (comReadySend xor comLastSend);
+	irq_o <= irq;
 	COMTEST <= COMTEST1;
-	--	IFF
-	process (all)
+	
+	-- modify irq:
+	process (MEMMode_i, MEMAddr_i)
 	begin
-
-
+		if (MEMAddr_i = x"00300020") then --IRQ_HANDLER
+			if (MEMMode_i = RAM_WRITE) then
+				irq <= MEMWData_i;
+			end if;
+		end if;
 	end process;
 	
 	--	MEM && IFF
@@ -81,17 +94,42 @@ begin
 		ram_we_o <= '0';
 		ram_addr_o <= (others=>'0');
 		ram_wdata_o <= (others=>'0');
+		MEMRData_o <= (others=>'0');
+		COMTransmitData <= (others=>'0');
+		rom_wdata_o <= (others=>'0');
+		rom_addr_o <= (others=>'0');
 		
 		if(rst_i = '1') then
-			comLastRead <= '1';
-         comLastSend <= '1';
+			null;
+		-- int
+		elsif (int_mode_i /= RAM_NOP) then 
+			if (int_addr_i(31 downto 8) = x"FFFFFF") then -- logic element based ROM
+				if (int_mode_i = RAM_WRITE) then 
+					rom_mode_o <= int_mode_i;
+					rom_addr_o <= x"000000" & int_addr_i(7 downto 0);
+					rom_wdata_o <= int_wdata_i;
+				else
+					-- error
+					null;
+				end if;
+			else -- RAM otherwise
+				if (MEMMode_i = RAM_WRITE) then
+					ram_we_o <= '1';
+					ram_addr_o <= int_addr_i(11 downto 2);
+					ram_wdata_o <= int_wdata_i;
+				else
+					-- error 
+					null;
+				end if;
+			end if;
+		-- MEM
 		elsif (MEMMode_i /= RAM_NOP) then
 			if (MEMAddr_i(23 downto 20) = x"3") then 
 				if (MEMAddr_i = x"00300010") then -- UART_IN
 					if (MEMMode_i = RAM_READ) then	-- only read the UART_IN can be allowed
 						COMData <= zero_extend(comRdata);
 						if(comReadyRead /= comLastRead) then
-							comLastRead <= comReadyRead;
+							MEMRData_o <= COMData;
 						else
 							-- error
 						end if;
@@ -102,11 +140,14 @@ begin
 						
 						if(COMTransmitBusy = '0' and (comLastSend /= comReadySend)) then
 							COMTransmitData <= MEMWData_i(7 downto 0);
-							comLastSend <= comReadySend;
 						else
 							--error
 						end if;
 					end if ;
+				elsif (MEMAddr_i = x"00300020") then --IRQ_HANDLER
+					if (MEMMode_i = RAM_READ) then
+						MEMRdata_o <= irq;
+					end if;
 				end if;
 			elsif (MEMAddr_i(31 downto 8) = x"FFFFFF") then -- logic element based ROM
 				rom_mode_o <= MEMMode_i;
@@ -141,18 +182,50 @@ begin
 		end if;
 	end process;
 	
-	 process(all)
-    begin
-        if (rst_i = '1') then
-            comReadyRead <= '0';
-            comRdata <= x"00";
-        elsif(rising_edge(COMReceiveReady)) then
-            comRdata <= COMReceiveData;
-            if(comReadyRead = comLastRead) then  -- this should always happen, otherwise a data is ignored.
-                comReadyRead <= not comReadyRead;
-            end if;
-        end if;
-    end process;
+	process(MEMmode_i, MEMaddr_i, rst_i) 
+	begin				
+		if (rst_i = '1') then 
+			comLastRead <= '1';
+		elsif (MEMAddr_i = x"00300010") then -- UART_IN
+			if (MEMMode_i = RAM_READ) then	-- only read the UART_IN can be allowed
+				if(comReadyRead /= comLastRead) then
+					comLastRead <= comReadyRead;
+				else
+					-- error
+				end if;
+			end if;
+		end if;
+	end process;
+	
+	process(MEMmode_i, MEMaddr_i) 
+	begin				
+		if (rst_i = '1') then 
+			comLastSend <= '1';
+		elsif (MEMAddr_i = x"00300000") then -- UART_IN
+			if (MEMMode_i = RAM_WRITE) then	-- only read the UART_IN can be allowed
+				if(comReadySend /= comLastSend) then
+					comLastSend <= comReadySend;
+				else
+					-- error
+				end if;
+			end if;
+		end if;
+	end process;
+	
+
+	
+	process(all)
+   begin
+		if (rst_i = '1') then
+			comReadyRead <= '0';
+         comRdata <= x"00";
+      elsif(rising_edge(COMReceiveReady)) then
+         comRdata <= COMReceiveData;
+         if(comReadyRead = comLastRead) then  -- this should always happen, otherwise a data is ignored.
+            comReadyRead <= not comReadyRead;
+         end if;
+      end if;
+   end process;
 
     process(all)
     begin
diff --git a/litecpu/pipeline/cpu_core.vhd b/litecpu/pipeline/cpu_core.vhd
index 0573b27..e96ad08 100644
--- a/litecpu/pipeline/cpu_core.vhd
+++ b/litecpu/pipeline/cpu_core.vhd
@@ -18,11 +18,17 @@ entity CPU_CORE is
 		MEMRData_i: in dword;
 		MEMWData_o: out dword;
 		
+		int_mode_o: out rammode_t;
+		int_addr_o: out mem_addr_t;
+		int_wdata_o: out dword;
+		
 		display_reg_o: out dword;
 		display_inst_o: out dword;
 		
 		UART1_IN_ready_i: in std_logic;
-		UART1_OUT_ready_i: in std_logic
+		UART1_OUT_ready_i: in std_logic;
+		
+		irq_i: in dword
 	);
 end CPU_CORE;
 
@@ -33,6 +39,9 @@ architecture behave of CPU_CORE is
 	
 	signal halt: std_logic;
 
+	signal reg_pc: dword;
+	signal reg_pc_we: std_logic;
+	
 	signal if_active_i: std_logic;
 	signal if_pc_o: mem_addr_t;
 	signal if_inst: inst_t;
@@ -125,7 +134,13 @@ begin
 		display_reg_o=> watch_reg,
 		
 		UART1_IN_ready_i => UART1_IN_ready_i,
-		UART1_OUT_ready_i => UART1_OUT_ready_i
+		UART1_OUT_ready_i => UART1_OUT_ready_i,
+		
+		pc_i => if_pc_o,
+		pc_o => reg_pc,
+		pc_we_o => reg_pc_we,
+		
+		irq_i => irq_i
 	);
 
 
@@ -143,6 +158,9 @@ begin
 		jb_en_i=> wb_jb_en_i,
 		jb_pc_i=> wb_jb_pc_i,
 
+		pc_i=> reg_pc,
+		pc_we_i=> reg_pc_we,
+	
 		pc_o=> if_pc_o
 	);
 
diff --git a/litecpu/pipeline/iff.vhd b/litecpu/pipeline/iff.vhd
index 5fa7304..77b30ec 100644
--- a/litecpu/pipeline/iff.vhd
+++ b/litecpu/pipeline/iff.vhd
@@ -18,7 +18,10 @@ entity IFF is
 		jb_pc_i: in mem_addr_t; -- jump/branch
 		jb_en_i: in std_logic;
 
-		pc_o: out mem_addr_t
+		pc_o: out mem_addr_t;
+		
+		pc_i: in mem_addr_t;
+		pc_we_i: in std_logic
 	);
 end IFF;
 
@@ -27,9 +30,11 @@ architecture behave of IFF is
 begin
 	pc_o <= pc;
 
-	process (clk_i)
+	process (clk_i, pc_we_i, pc_i)
 	begin
-		if (rising_edge(clk_i)) then
+		if (pc_we_i) then 
+			pc <= pc_i;
+		elsif (rising_edge(clk_i)) then
 			active_o <= '0';
 
 			if (rst_i = '1') then
diff --git a/litecpu/pipeline/regs.vhd b/litecpu/pipeline/regs.vhd
index c06d407..b8e0ddc 100644
--- a/litecpu/pipeline/regs.vhd
+++ b/litecpu/pipeline/regs.vhd
@@ -18,13 +18,23 @@ entity REGS is
 		wr_addr_i: in reg_addr_t;
 		wr_data_i: in dword;
 		
+		pc_i: in dword;
+		pc_we_o: out std_logic;
+		pc_o: out dword;
+		
 		-- Deal with interrupts or exceptions --
 		halt_o: out std_logic;
 		
 		display_reg_o: out dword;
 		
 		UART1_IN_ready_i: in std_logic;
-		UART1_OUT_ready_i: in std_logic
+		UART1_OUT_ready_i: in std_logic;
+		
+		int_mode_o: out rammode_t;
+		int_addr_o: out mem_addr_t;
+		int_wdata_o: out dword;
+		
+		irq_i: in dword
 	);
 end REGS;
 
@@ -44,7 +54,8 @@ architecture behave of REGS is
 	signal UART1_IN_last_ready: std_logic := '0';
 	signal UART1_OUT_ready: std_logic := '0';
 	signal UART1_OUT_last_ready: std_logic := '0';
-	
+		
+	signal current_sp: dword;
 begin
 	real_wr_addr <= wr_addr_i(4 downto 0);
 	real_r1_addr <= raddr1_i(4 downto 0);
@@ -54,22 +65,56 @@ begin
 
 	-- writing to ZR and WR will have no effect as their reads are
 	--	hardcoded
+	process (UART1_IN_ready_i)
+	begin
+		if (rising_edge(UART1_IN_ready_i)) then 
+			UART1_IN_last_ready <= not UART1_IN_last_ready;
+		end if;
+	end process;
+	
+	process (UART1_OUT_ready_i)
+	begin
+		if (rising_edge(UART1_OUT_ready_i)) then 
+			UART1_OUT_last_ready <= not UART1_OUT_last_ready;
+		end if;
+	end process;
+	
 	process (all)
 	begin
 		if (rst_i = '1') then 
 			regs(4) <= x"00000200";
-	--	elsif (rising_edge(UART1_IN_ready_i)) then
-	--		UART1_IN_last_ready <= not UART1_IN_ready;
-	--	elsif (rising_edge(UART1_OUT_ready_i)) then
-	--		UART1_OUT_last_ready <= not UART1_OUT_ready; 
 		elsif (rising_edge(clk_i)) then
+			regs(0) <= pc_i;
+			pc_we_o <= '0';
+			pc_o <= (others => '0');
+			int_mode_o <= RAM_NOP;
+			int_addr_o <= (others=> '0');
+			int_wdata_o <= (others=> '0');
 			if (wr_en_i = '1') then
 				regs(to_integer(unsigned(real_wr_addr))) <= wr_data_i;
+				if (real_wr_addr = "00000") then 
+					pc_we_o <= '1';
+					pc_o <= wr_data_i;
+				end if;
 			end if;
 			if (UART1_IN_last_ready /= UART1_IN_ready) then 
 				regs(4)(10) <= '1';
 				if ((regs(4)(7) = '1') and regs(4)(1) = '1') then	-- if interrupt is enabled, emit interrupt signal
 					regs(4)(8) <= '1';
+					
+					-- handling the interrupt:
+					regs(4)(1) <= '0';
+					int_mode_o <= RAM_WRITE;
+					current_sp <= regs(1);
+					int_addr_o <= current_sp;
+					int_wdata_o <= regs(0);
+					
+					regs(0) <= irq_i;
+					pc_we_o <= '1';
+					pc_o <= irq_i;
+					
+					regs(1) <= std_logic_vector(unsigned(regs(1)) - 4);
+					
 				end if;
 				UART1_IN_ready <= UART1_IN_last_ready;
 			end if;
